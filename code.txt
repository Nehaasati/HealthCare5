using HealthCare5;
using System.Diagnostics;

// Lists to store users and locations
List<User> users = new();
List<Location> locations = new();
Permission permission = new();
User? active_user = null;

// Sample users
users.Add(new User("111", "1111", User.Role.Admin));
users.Add(new User("222", "2222", User.Role.Admin));
users.Add(new User("333", "3333", User.Role.Personnel));
users.Add(new User("888", "8888", User.Role.Personnel));
users.Add(new Patient("444", "4444") { Status = Permission.PatientStatus.Approved });
Patient patient555 = new Patient("555", "5555") { Status = Permission.PatientStatus.Approved };
patient555.JournalEntries.Add("Fever on Oct 20.");
users.Add(patient555);

// Sample location and appointments
locations.Add(new Location("BVC", "LUND"));
locations[0].Appointments.Add(new Appointment(new DateTime(2025, 10, 22, 9, 0, 0), "333", "General checkup"));
locations[0].Appointments.Add(new Appointment(new DateTime(2025, 10, 22, 10, 30, 0), "888", "Dental cleaning"));

// Program loop
bool running = true;

while (running)
{
    Console.Clear();
    if (active_user == null)
    {
        Console.WriteLine("=== HealthCare System ===");
        Console.WriteLine("1. Login");
        Console.WriteLine("2. Register as patient");
        Console.WriteLine("q. Quit");
        Console.Write("Choose: ");
        string? choice = Console.ReadLine();

        if (choice == "1")
        {
            Console.Clear();
            Console.Write("SSN: ");
            string? username = Console.ReadLine();
            Console.Write("Password: ");
            string? password = Console.ReadLine();
            Debug.Assert(username != null);
            Debug.Assert(password != null);
            bool found = false;
            foreach (User user in users)
            {
                if (user.SSN == username && user.Password == password)
                {
                    if (user is Patient pat)
                    {
                        if (pat.Status == Permission.PatientStatus.Pending)
                        {
                            Console.WriteLine("Registration pending.");
                            Console.ReadLine();
                            found = true;
                            break;
                        }
                        else if (pat.Status == Permission.PatientStatus.Denied)
                        {
                            Console.WriteLine("Registration denied.");
                            Console.ReadLine();
                            found = true;
                            break;
                        }
                    }
                    active_user = user;
                    Console.WriteLine("Login successful.");
                    Console.ReadLine();
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                Console.WriteLine("Wrong SSN or password.");
                Console.ReadLine();
            }
        }
        else if (choice == "2")
        {
            Console.Clear();
            Console.WriteLine("=== Patient Registration ===");
            Console.Write("New SSN: ");
            string? newSSN = Console.ReadLine();
            Console.Write("New password: ");
            string? newPassword = Console.ReadLine();

            if (string.IsNullOrEmpty(newSSN) || string.IsNullOrEmpty(newPassword))
            {
                Console.WriteLine("Missing input.");
                Console.ReadLine();
                continue;
            }

            bool exists = users.Exists(u => u.SSN == newSSN);
            if (exists)
            {
                Console.WriteLine("SSN already exists.");
            }
            else
            {
                Patient newPatient = new(newSSN, newPassword);
                users.Add(newPatient);
                newPatient.RequestRegistration();
            }

            Console.ReadLine();
        }
        else if (choice == "q")
        {
            running = false;
        }
    }
    else
    {
        Console.Clear();
        Console.WriteLine($"Logged in as: {active_user.SSN} ({active_user.UserRole})\n");

        // Admin
        if (active_user.UserRole == User.Role.Admin || active_user.UserRole == User.Role.Admins)
        {
            Console.WriteLine("1. Add location");
            Console.WriteLine("2. View locations");
            Console.WriteLine("3. View pending patients");
            Console.WriteLine("4. Approve or deny patient");
            Console.WriteLine("5. View location schedule");
            Console.WriteLine("6. Assign permission to admin");
            Console.WriteLine("7. Assign region to admin");
            Console.WriteLine("l. Logout");
            Console.Write("Choose: ");
            string? choice = Console.ReadLine();
            switch (choice)
            {
                case "1":
                    Console.Clear();
                    Console.Write("Location name: ");
                    string? name = Console.ReadLine();
                    Console.Write("Description: ");
                    string? desc = Console.ReadLine();
                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(desc))
                    {
                        locations.Add(new Location(name, desc));
                        Console.WriteLine("Location added.");
                    }
                    else
                    {
                        Console.WriteLine("Invalid input.");
                    }
                    Console.ReadLine();
                    break;

                case "2":
                    Console.Clear();
                    Console.WriteLine("All locations:");
                    foreach (var loc in locations)
                        Console.WriteLine($"- {loc.Name}: {loc.Description}");
                    Console.ReadLine();
                    break;

                case "3":
                    Console.Clear();
                    permission.ShowPendingPatients(users);
                    Console.ReadLine();
                    break;

                case "4":
                    Console.Clear();
                    permission.ShowPendingPatients(users);
                    Console.Write("Patient SSN: ");
                    string? ssn = Console.ReadLine();
                    Patient? selected = users.Find(u => u is Patient p && p.SSN == ssn) as Patient;
                    if (selected == null) Console.WriteLine("Patient not found.");
                    else
                    {
                        Console.Write("Approve (a) or Deny (d)? ");
                        string? action = Console.ReadLine();
                        if (action == "a") permission.ApprovePatient(selected);
                        else if (action == "d") permission.DenyPatient(selected);
                        else Console.WriteLine("Invalid choice.");
                    }
                    Console.ReadLine();
                    break;

                case "5":
                    ShowLocationSchedule(locations);
                    break;

                case "6":
                    Console.Clear();
                    Console.Write("Admin SSN: ");
                    string? adminSSN = Console.ReadLine();
                    User? adminUser = users.Find(u => (u.UserRole == User.Role.Admin || u.UserRole == User.Role.Admins) && u.SSN == adminSSN);
                    if (adminUser != null)
                    {
                        Console.WriteLine("Select permission number:");
                        int i = 1;
                        foreach (String perm in Enum.GetValues(typeof(Permission.PermissionType)))
                        {
                            Console.WriteLine($"{i}. {perm}");
                            i++;
                        }
                        Console.Write("Choice: ");
                        if (int.TryParse(Console.ReadLine(), out int permChoice) && permChoice >= 1 && permChoice <= Enum.GetValues(typeof(Permission.PermissionType)).Length)
                        {
                            Permission.PermissionType selectedPerm = (Permission.PermissionType)Enum.GetValues(typeof(Permission.PermissionType)).GetValue(permChoice - 1)!;
                            permission.AssignPermissionsToAdmin(adminUser, selectedPerm);
                        }
                    }
                    else Console.WriteLine("Admin not found.");
                    Console.ReadLine();
                    break;

                case "7":
                    Console.Clear();
                    Console.Write("Admin SSN: ");
                    string? regionSSN = Console.ReadLine();
                    User? regionAdmin = users.Find(u => (u.UserRole == User.Role.Admin || u.UserRole == User.Role.Admins) && u.SSN == regionSSN);
                    if (regionAdmin != null)
                    {
                        Console.Write("Region: ");
                        string? region = Console.ReadLine();
                        if (!string.IsNullOrEmpty(region)) permission.AssignRegionToAdmin(regionAdmin, region);
                    }
                    else Console.WriteLine("Admin not found.");
                    Console.ReadLine();
                    break;

                case "l":
                    active_user = null;
                    break;
            }
        }
        // Patient
        else if (active_user.UserRole == User.Role.Personnel)
        {
            Console.WriteLine("1. View locations");
            Console.WriteLine("2. View schedule for a location");
            Console.WriteLine("3. View patient journal");
            Console.WriteLine("4. Approve Appointment");
            Console.WriteLine("5. Modify Appointment");
            Console.WriteLine("6. Register Appointment");
            Console.WriteLine("7. Journal Entries With Different Read Permission");
            Console.WriteLine("8. Patients Journal Entries");
            Console.WriteLine("l. Logout");
 
            Console.Write("Choose: ");
            string? choice = Console.ReadLine();
 
            switch (choice)
            {
                case "1":
                    if (active_user.HasPermission(Permission.PermissionType.CanViewScheduleLocation))
                    {
                        Console.Clear();
                        Console.WriteLine("All locations:");
                        if (locations.Count == 0)
                            Console.WriteLine("No locations yet.");
                        else
                            foreach (Location loc in locations)
                                Console.WriteLine("- " + loc.Name + ": " + loc.Description);
                        Console.WriteLine("Press Enter to continue");
                        Console.ReadLine();
                    }
                    else
                    {
                        Console.WriteLine("You do not have permission to view locations");
                        Console.ReadLine();
                    }
                    break;
 
                case "2":
                    if (active_user.HasPermission(Permission.PermissionType.CanViewScheduleLocation))
                        ShowLocationSchedule(locations); // Ändrat
                    else
                    {
                        Console.WriteLine("You do not have permission to view schedule");
                        Console.ReadLine();
                    }
                    break;
 
                case "3": // Ändrat: Patientjournal fixad
               
                    Console.Clear();
                    Console.WriteLine("View Patient Journal");
                    Console.Write("Enter patient SSN: ");
                    string? ssn3 = Console.ReadLine();
 
                    // Step 1: Search for the patient
                  Patient? targetPatient = null;
   
                  foreach (User user in users)
                 {
                 if (user is Patient patient)
                    {
                 if (patient.SSN == ssn3)
                 {
                 targetPatient = patient;
                 break;
                  }
                   }
                 }
 
                  // Step 2: Check if patient was found
                 if (targetPatient == null)
                {
                   Console.WriteLine("Patient not found.");
                 }
                 // Step 3: Check if patient is approved
                 else if (targetPatient.Status != Permission.PatientStatus.Approved)
                {
                 Console.WriteLine("Patient is not approved. Journal access denied.");
                }
                 // Step 4: Show the journal
                else
                {
                targetPatient.ShowJournal();
                }
 
                Console.ReadLine();
                break;
 
                case "4":
                    if (active_user.HasPermission(Permission.PermissionType.CanApproveAppointmentRequests))
                        Console.WriteLine("View appointment requests");
                    else
                        Console.WriteLine("You do not have permission to approve requests");
                    Console.ReadLine();
                    break;
 
                case "5":
                    if (active_user.HasPermission(Permission.PermissionType.CanModifyAppointments))
                        Console.WriteLine("View modify appointments");
                    else
                        Console.WriteLine("You do not have permission to modify appointments");
                    Console.ReadLine();
                    break;    
 
                /*case "5":
 
                    if (active_user.HasPermission(Permission.PermissionType.CanModifyAppointments))
                    {
                        //Console.Clear();
                       // Console.WriteLine("Modify Appointment");
 
                        //all apoointment
                       // List<Appointment> allAppointments = new List<Appointment>();
                       // List<Location> ownerLocations = new List<Location>();
 
 
 
 
                     else
                        Console.WriteLine("You do not have permission to modify appointments");
                    Console.ReadLine();
                    break;
 
 
 
                   
                       
                    }*/
               
 
 
                case "6":
                    if (active_user.HasPermission(Permission.PermissionType.CanRegisterAppointments))
                  {
                     Console.Clear();
                     Console.WriteLine("Register New Appointment");
 
                      if (locations.Count == 0)
                     {
                       Console.WriteLine("No locations available.");
                       Console.ReadLine();
                       }
                     else
                       {
                        // Show locations with numbers: 1, 2, 3...
                        Console.WriteLine("Available locations:");
                        int number = 1;
                        foreach (Location loc in locations)
                     {
                      Console.WriteLine(number + ". " + loc.Name + " - " + loc.Description);
                      number++;
                      }
 
                     Console.Write("Enter location number (e.g. 1): ");
                     string? locInput = Console.ReadLine();
 
                     // Find selected location using simple loop
                      Location? selectedLocation = null;
                      int counter = 1;
                       foreach (Location loc in locations)
                     {
                       if (locInput == counter.ToString())
                     {
                        selectedLocation = loc;
                        break;
                        }
                        counter++;
                      }
 
                     if (selectedLocation == null)
                      {
                        Console.WriteLine("Invalid location number.");
                        Console.ReadLine();
                      }
                     else
                     {
                     // Get appointment details
                     Console.Write("Patient SSN: ");
                     string? patientSSN = Console.ReadLine();
 
                    Console.Write("Date (yyyy-MM-dd): ");
                    string? dateStr = Console.ReadLine();
 
                     Console.Write("Time (HH:mm): ");
                    string? timeStr = Console.ReadLine();
 
                    Console.Write("Reason: ");
                    string? reason = Console.ReadLine();
 
                    // Check if any field is missing
                    if (string.IsNullOrEmpty(patientSSN) ||
                       string.IsNullOrEmpty(dateStr) ||
                       string.IsNullOrEmpty(timeStr) ||
                       string.IsNullOrEmpty(reason))
                    {
                      Console.WriteLine("All fields are required.");
                      Console.ReadLine();
                    }
                    else
                    {
                       // Try to create the appointment
                      try
                      {
                          string fullDateTime = dateStr + " " + timeStr;
                          DateTime apptTime = DateTime.Parse(fullDateTime);
 
                          Appointment newAppt = new Appointment(apptTime, patientSSN, reason);
                          selectedLocation.Appointments.Add(newAppt);
 
                          Console.WriteLine("Appointment registered successfully!");
                       }
                      catch
                      {
                          Console.WriteLine("Invalid date or time. Use format: yyyy-MM-dd and HH:mm");
                      }
                       Console.ReadLine();
                         }
                        }
                    }
                    }
                   else
                    {
                        Console.WriteLine("You do not have permission to register appointments");
                       Console.ReadLine();
                    }
                    break;
 
                case "7":
                    if (active_user.HasPermission(Permission.PermissionType.CanMarkJournalEntriesWithDifferentReadPermissions))
                        Console.WriteLine("View journal entries with different read permissions");
                    else
                        Console.WriteLine("You do not have permission to view these entries");
                    Console.ReadLine();
                    break;
 
                case "8":
                    if (active_user.HasPermission(Permission.PermissionType.CanViewPatientsJournalEntries))
                        Console.WriteLine("View patients journal entries");
                    else
                        Console.WriteLine("You do not have permission to view patients journal entries");
                    Console.ReadLine();
                    break;
 
                case "l":
                    active_user = null;
                    break;
            }
        }
    }
}
 
// Ändrat: Flyttad funktion utanför alla loopar och switchar
bool ShowLocationSchedule(List<Location> locations)
{
    Console.Clear();
   
    // Do we have any locations?
    int numberOfLocations = locations.Count;
   
    if (numberOfLocations == 0)
    {
        Console.WriteLine("No locations available.");
        Console.ReadLine();
        return false;
    }
   
    // Show all locations
    Console.WriteLine("Locations:");
   
    int counter = 1;
    for (int i = 0; i < numberOfLocations; i++)
    {
        Location loc = locations[i];
        Console.WriteLine(counter + ". " + loc.Name + " - " + loc.Description);
        counter = counter + 1;
    }
   
    // Ask which location they want
    Console.Write("Enter location number: ");
    string userInput = Console.ReadLine();
   
    if (userInput == null)
    {
        userInput = "";
    }
   
    // Convert text to number
    int selectedNumber = 0;
    bool isNumber = int.TryParse(userInput, out selectedNumber);
   
    // Is it a valid number?
    bool isValid = true;
   
    if (isNumber == false)
    {
        isValid = false;
    }
    else if (selectedNumber < 1)
    {
        isValid = false;
    }
    else if (selectedNumber > numberOfLocations)
    {
        isValid = false;
    }
   
    if (isValid == false)
    {
        Console.WriteLine("Invalid location number.");
        Console.ReadLine();
        return false;
    }
   
    // Get the location they chose
    int index = selectedNumber - 1;
    Location chosenLocation = locations[index];
   
    // Show the schedule
    Console.Clear();
    Console.WriteLine("Schedule for: " + chosenLocation.Name + " - " + chosenLocation.Description);

    foreach (Appointment appt in chosenLocation.Appointments)
    {
        Console.WriteLine("- " + appt.GetInfo());
    }

if (chosenLocation.Appointments.Count == 0)
{
    Console.WriteLine("No appointments scheduled.");
}
else
{
    foreach (Appointment appt in chosenLocation.Appointments)
    {
        Console.WriteLine("- " + appt.GetInfo());
    }
}
    Console.ReadLine();
    return true;
}
Console.WriteLine("Program closed.");





namespace HealthCare5;
class Location
{
  public string Name;
  public string Description;
  // List to store appointments for this location
  public List<Appointment> Appointments;
  // Constructor
  public Location(string name, string description)
  {
    Name = name;
    Description = description;
    Appointments = new List<Appointment>(); // initialize the list
  }

  // Adds a new appointment to the location's list of appointments
   public void AddAppointment(Appointment appt)
  {
    Appointments.Add(appt);
  }

}



namespace HealthCare5;

class Permission
{
    public enum PatientStatus
    {
        Pending,
        Approved,
        Denied
    }

    public enum PermissionType
    {
        CanViewScheduleLocation,
        CanApproveAppointmentRequests,
        CanModifyAppointments,
        CanRegisterAppointments,
        CanMarkJournalEntriesWithDifferentReadPermissions,
        CanViewPatientsJournalEntries, // Fixed typo
    }

    public void ApprovePatient(Patient patient)
    {
        if (patient.Status == PatientStatus.Pending)
        {
            patient.Status = PatientStatus.Approved;
            Console.WriteLine("Patient approved: " + patient.SSN);
        }
        else
        {
            Console.WriteLine("Patient not pending.");
        }
    }

    public void DenyPatient(Patient patient)
    {
        if (patient.Status == PatientStatus.Pending)
        {
            patient.Status = PatientStatus.Denied;
            Console.WriteLine("Patient denied: " + patient.SSN);
        }
        else
        {
            Console.WriteLine("Patient not pending.");
        }
    }

    public void ShowPendingPatients(List<User> users)
    {
        Console.WriteLine("Pending patients:");
        bool any = false;

        foreach (User u in users)
        {
            if (u is Patient patient && patient.Status == PatientStatus.Pending)
            {
                Console.WriteLine("- " + patient.SSN);
                any = true;
            }
        }

        if (!any)
        {
            Console.WriteLine("No pending patients.");
        }
    }

    public void AssignPermissionsToAdmin(User admin, PermissionType permission)
    {
        if (admin.UserRole != User.Role.Admin && admin.UserRole != User.Role.Admins)
        {
            Console.WriteLine("User is not an admin.");
            return;
        }

        if (!admin.Permissions.Contains(permission))
        {
            admin.Permissions.Add(permission);
            Console.WriteLine($"Permission {permission} assigned to {admin.SSN}");
        }
        else
        {
            Console.WriteLine("Admin already has this permission.");
        }
    }

    public void AssignRegionToAdmin(User admin, string region)
    {
        if (admin.UserRole != User.Role.Admin && admin.UserRole != User.Role.Admins)
        {
            Console.WriteLine("User is not an admin.");
            return;
        }

        admin.Region = region; // Now works because User.cs has Region property
        Console.WriteLine($"Region '{region}' assigned to admin {admin.SSN}");
    }
}


using System.Security;
namespace HealthCare5;
class User
{
    public string SSN;
    public string Password;
    public enum Role
    {
        Admin,
        Admins,
        Personnel,
        Patient,
    }
    public Role UserRole;
    public List<Permission.PermissionType> Permissions;
    public string? Region; // Added for admin region
    public User(string ssn, string password, Role role)
    {
        SSN = ssn;
        Password = password;
        UserRole = role;
        Permissions = new List<Permission.PermissionType>();

        if (UserRole == Role.Personnel)
        {
            Permissions.Add(Permission.PermissionType.CanViewScheduleLocation);
            Permissions.Add(Permission.PermissionType.CanApproveAppointmentRequests);
            Permissions.Add(Permission.PermissionType.CanModifyAppointments);
            Permissions.Add(Permission.PermissionType.CanRegisterAppointments);
            Permissions.Add(Permission.PermissionType.CanMarkJournalEntriesWithDifferentReadPermissions);
            Permissions.Add(Permission.PermissionType.CanViewPatientsJournalEntries); // Fixed typo
        }
    }
    public bool HasPermission(Permission.PermissionType p)
    {
        return Permissions.Contains(p);
    }
}




 namespace HealthCare5;
class Appointment
{
    // Date and time of the appointment
    public DateTime Start;
    //patient ssn
    public string PatientSSN;
    //note for patient
    public string Notes;
    //constructor for appointment
    public Appointment(DateTime start, string patientSSN, string notes = "")
    {
        Start = start;
        PatientSSN = patientSSN;
        Notes = notes;
    }
    //appointment detail
    public string GetInfo()
    {
        string noteText = Notes;
        if (noteText == null || noteText == "")
        {
            noteText = "-";
        }
        return Start.ToString("yyyy-MM-dd HH:mm") + " | Patient: " + PatientSSN + " | " + noteText;
    }
}



namespace HealthCare5;
class Patient : User
{
    public Permission.PatientStatus Status;
    public List<string> JournalEntries = new List<string>();
    public Patient(string ssn, string password)
        : base(ssn, password, Role.Patient)
    {
        Status = Permission.PatientStatus.Pending;
    }
    public void RequestRegistration()
    {
        Console.WriteLine("Registration request sent.");
    }
    public void ShowStatus()
    {
        Console.WriteLine("Status: " + Status);
    }
    public void AddJournalEntry(string entry)
    {
        JournalEntries.Add(entry);
    }
    public void ShowJournal()
    {
        Console.WriteLine($"Journal for patient {SSN}:");
        if (JournalEntries.Count == 0)
        {
            Console.WriteLine("No journal entries.");
        }
        else
        {
            foreach (string entry in JournalEntries)
            {
                Console.WriteLine("- " + entry);
            }
        }
    }
    public void RequestAppointment(List<Location> locations, string locationName, DateTime dateTime, string note = "")
    {
        Location? selected = null;
        foreach (Location loc in locations)
        {
            if (loc.Name.ToLower() == locationName.ToLower())
            {
                selected = loc;
                break;
            }
        }
        if (selected == null)
        {
            Console.WriteLine("Location not found.");
            return;
        }
        Appointment newAppointment = new Appointment(dateTime, this.SSN, note);
        selected.Appointments.Add(newAppointment); // Fixed property name from Appointment -> Appointments
        Console.WriteLine($"Appointment requested at {selected.Name} on {dateTime}.");
    }
    public void ViewAppointments(List<Location> locations)
    {
        Console.WriteLine($"Appointments for patient {SSN}:");
        bool any = false;

        foreach (Location loc in locations)
        {
            foreach (Appointment app in loc.Appointments)
            {
                if (app.PatientSSN == this.SSN)
                {
                    Console.WriteLine($"- {app.GetInfo()} at {loc.Name}");
                    any = true;
                }
            }
        }

        if (!any)
        {
            Console.WriteLine("No appointments scheduled.");
        }
    }
}
